#!/usr/bin/env python3

import os
import shutil
import datetime


ZONES_DIR = "/usr/share/zoneinfo/"


def get_tz_string(filename):
    data = open(filename, "rb").read().split(b"\n")[-2]
    return data.decode("utf-8")



if __name__ == "__main__":
    tmpfilename = "/tmp/tzfile.tmp"
    
    print("Generating the tz.rs file...")
    
    if os.path.exists(tmpfilename):
        os.remove(tmpfilename)
        
    with open(tmpfilename, "w") as f:
        f.write("// DO NOT MODIFY\n")
        f.write(f"// File was generated by {os.path.basename(__file__)} on {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n")
        f.write("//\n")
        f.write("//\n\n")

        # use std::collections::HashMap;
        # use once_cell::sync::Lazy;
        # 
        # static GEO_MAP: Lazy<HashMap<&'static str, &'static str>> = Lazy::new(|| {
        #     let mut m = HashMap::new();
        f.write("use std::collections::HashMap;\n")
        f.write("use once_cell::sync::Lazy;\n")
        f.write("\n")
        f.write("static GEO_MAP: Lazy<HashMap<&'static str, &'static str>> = Lazy::new(|| {\n")
        f.write("    let mut m = HashMap::new();\n")

        for root, dirs, files in os.walk(ZONES_DIR):
            for file in files:
                fullname = os.path.join(root, file)
                relativename = os.path.relpath(fullname, ZONES_DIR)
                
                if "/" not in relativename:
                    continue
                
                tz_string = get_tz_string(fullname)
                f.write(f'    m.insert("{relativename}", "{tz_string}");\n')

        
        f.write("    m\n")
        f.write("});\n")
        f.write("\n")
        f.write("pub fn lookup_tz_posix_string(key: &str) -> Option<&'static str> {\n")
        f.write("    GEO_MAP.get(key).copied()\n")
        f.write("}\n")
        
    shutil.copy(tmpfilename, "./src/tz.rs")



